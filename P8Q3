/*Q3- Search the BST for a given element (KEY) and report the appropriate message
Ans- 
Algorithm-
Step1- start
Step2- Node Structure and Creation -
1-Defines a BinaryTreeNode structure for BST nodes with key, left, and right pointers.
2- createNode allocates memory, sets the key value, and initializes child pointers to NULL for a new node.
Step3- Node Insertion -
1-insertNode recursively inserts a value:
2- If empty, create a new node.
3- If the value is less than the root's key, insert it in the left subtree.
4- If the value is greater, insert it in the right subtree.
Step4- Search a Key:
Define searchNode that takes the root and target key.
1-Recursively:
2- If root is NULL or the key is found (matching root's key), return the node (search successful).
3- If target is greater than root's key, search the right subtree. Otherwise, search the left subtree.
4- If search reaches a NULL node, the key is not found.
Step5- Build and Search (Main Function):
1-Build the BST using insertNode as before.
2- Set a target key to search.
3- Call searchNode with the root and target key.
4- Print a message based on whether the search found the key.
Step6- stop
Code-*/

#include <stdio.h>
#include <stdlib.h>
// Define the structure for a BST node
struct BinaryTreeNode {
    int key;
    struct BinaryTreeNode* left;
    struct BinaryTreeNode* right;
};
// Function to create a new node
struct BinaryTreeNode* createNode(int value) {
    struct BinaryTreeNode* newNode = (struct BinaryTreeNode*)malloc(sizeof(struct BinaryTreeNode));
    newNode->key = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}
// Function to insert a node into the BST
struct BinaryTreeNode* insertNode(struct BinaryTreeNode* root, int value) {
    if (root == NULL)
        return createNode(value);
    if (value < root->key)
        root->left = insertNode(root->left, value);
    else if (value > root->key)
        root->right = insertNode(root->right, value);
    return root;
}
// Function to search for a key in the BST
struct BinaryTreeNode* searchNode(struct BinaryTreeNode* root, int target) {
    if (root == NULL || root->key == target)
        return root;
    if (target > root->key)
        return searchNode(root->right, target);
    else
        return searchNode(root->left, target);
}
int main() {
    struct BinaryTreeNode* root = NULL;
    int values[] = {6, 9, 5, 2, 8, 15, 24, 14, 7, 8, 5, 2};
    int n = sizeof(values) / sizeof(values[0]);
    for (int i = 0; i < n; ++i)
        root = insertNode(root, values[i]);
    int target = 8; // Change this to the desired key you want to search
    struct BinaryTreeNode* result = searchNode(root, target);
    if (result)
        printf("%d found in the BST.\n", target);
    else
        printf("%d not found in the BST.\n", target);
    // Clean up memory (optional)
    // Implement deletion if needed

    return 0;
}
